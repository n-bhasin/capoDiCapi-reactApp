{"version":3,"sources":["components/ListGroup.jsx","components/ChatTable.jsx","components/common/Pagination.jsx","utils/paginate.js","services/roomApi.js","components/Chat.jsx","components/LogTable.jsx","components/Log.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["ListGroup","props","items","onItemSelect","selectedItem","className","map","item","style","cursor","key","_id","onClick","room","ChatTable","chats","onSort","chat","index","sender","message","date","Pagination","itemsCount","pageSize","onPageChange","currentPage","pagesCount","Math","ceil","pages","_","range","page","paginate","pageNumber","startIndex","slice","take","value","rooms","name","Chat","state","sortColumn","path","order","handlePage","setState","handleSort","console","log","handleItem","selectedRoom","axios","get","response","data","filter","g","this","count","length","allChats","filtered","c","sorted","orderBy","marginBottom","paddingLeft","borderLeft","Component","LogTable","logs","logType","allLogs","Navbar","color","marginTop","position","left","display","padding","fontSize","paddingTop","to","component","exact","Log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.07cbd510.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ListGroup = (props) => {\n  const { items, onItemSelect, selectedItem } = props;\n  return (\n    <div>\n      <ul className=\"list-group\">\n        {items.map((item) => (\n          <li\n            style={{ cursor: \"pointer\" }}\n            key={item._id}\n            className={\n              item === selectedItem\n                ? \"list-group-item active\"\n                : \"list-group-item\"\n            }\n            onClick={() => onItemSelect(item)}\n          >\n            {item.room}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ListGroup;\n","import React from \"react\";\n\nconst ChatTable = (props) => {\n  const { chats, onSort } = props;\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th onClick={() => onSort(\"sender\")}>Sender</th>\n          <th onClick={() => onSort(\"message\")}>Message</th>\n          <th onClick={() => onSort(\"room\")}>Room</th>\n          <th onClick={() => onSort(\"date\")}>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {chats.map((chat, index) => (\n          <tr key={chat._id}>\n            <td>{chat.sender}</td>\n            <td>{chat.message}</td>\n            <td>{chat.room}</td>\n            <td>{chat.date}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default ChatTable;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\n\nconst Pagination = (props) => {\n  const { itemsCount, pageSize, onPageChange, currentPage } = props;\n  // console.log(itemsCount);\n  const pagesCount = Math.ceil(itemsCount / pageSize);\n  if (pagesCount === 1) return null;\n\n  const pages = _.range(1, pagesCount + 1);\n  return (\n    <nav>\n      <ul className=\"pagination\">\n        {pages.map((page) => (\n          <li\n            key={page}\n            className={page === currentPage ? \"page-item active\" : \"page-item\"}\n          >\n            <button onClick={() => onPageChange(page)} className=\"page-link\">\n              {page}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nPagination.propTypes = {\n  itemsCount: PropTypes.number.isRequired,\n  pageSize: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  currentPage: PropTypes.number.isRequired,\n};\nexport default Pagination;\n","import _ from \"lodash\";\n\n//we need three major items\nexport function paginate(items, pageNumber, pageSize) {\n  const startIndex = (pageNumber - 1) * pageSize;\n  // console.log(startIndex);\n  return _(items).slice(startIndex).take(pageSize).value();\n}\n","export const rooms = [\n  { _id: \"0\", name: \"room1\", room: \"room1\" },\n  { _id: \"1\", name: \"room2\", room: \"room2\" },\n  { _id: \"2\", name: \"room3\", room: \"room3\" },\n  { _id: \"3\", name: \"room4\", room: \"room4\" },\n];\n\nexport function getRooms() {\n  return rooms.filter((g) => g);\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport ListGroup from \"./ListGroup\";\nimport ChatTable from \"./ChatTable\";\nimport Pagination from \"./common/Pagination\";\nimport { paginate } from \"../utils/paginate\";\nimport _ from \"lodash\";\nimport { getRooms } from \"../services/roomApi\";\n\nclass Chat extends Component {\n  state = {\n    chats: [],\n    rooms: [],\n    pageSize: 5,\n    currentPage: 1,\n    sortColumn: { path: \"sender\", order: \"asc\" },\n  };\n  async componentDidMount() {\n    const response = await axios.get(\n      `https://capodicapi.herokuapp.com/api/capodicapi/chat`\n    );\n\n    const chats = response.data;\n    const rooms = [{ room: \"All Rooms\" }, ...getRooms()];\n\n    console.log(chats);\n    console.log(rooms);\n    this.setState({ chats, rooms: rooms });\n  }\n  handlePage = (page) => {\n    this.setState({ currentPage: page });\n  };\n  handleSort = (path) => {\n    const sortColumn = { ...this.state.sortColumn };\n    if (sortColumn.path === path)\n      sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\n    else {\n      sortColumn.path = path;\n      sortColumn.order = \"asc\";\n    }\n    console.log(sortColumn);\n    this.setState({ sortColumn });\n  };\n\n  handleItem = (room) => {\n    console.log(room);\n    this.setState({ selectedRoom: room, currentPage: 1 });\n  };\n  render() {\n    const { length: count } = this.state.chats;\n    const {\n      pageSize,\n      currentPage,\n      chats: allChats,\n      sortColumn,\n      selectedRoom,\n    } = this.state;\n\n    const filtered =\n      selectedRoom && selectedRoom.name\n        ? allChats.filter((c) => c.room === selectedRoom.name)\n        : allChats;\n    if (count === 0) return <p>There are no chats in database.</p>;\n\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n    const chats = paginate(sorted, currentPage, pageSize);\n\n    return (\n      <div className=\"row m-4\">\n        <div className=\"col-2\">\n          <h2 style={{ marginBottom: \"20px\" }}>Menu</h2>\n          <ListGroup\n            items={this.state.rooms}\n            onItemSelect={this.handleItem}\n            selectedItem={this.state.selectedRoom}\n          />\n        </div>\n        <div className=\"col-10\">\n          <h2 style={{ paddingLeft: \"20px\" }}>All Chat History</h2>\n          <div style={{ borderLeft: \"1px solid #333\", paddingLeft: \"20px\" }}>\n            <p>There are total {sorted.length} chats.</p>\n            <ChatTable chats={chats} onSort={this.handleSort} />\n            <Pagination\n              itemsCount={count}\n              pageSize={pageSize}\n              currentPage={currentPage}\n              onPageChange={this.handlePage}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n","import React from \"react\";\n\nconst LogTable = (props) => {\n  const { logs, onSort } = props;\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th onClick={() => onSort(\"logtype\")}>Log Type</th>\n          <th onClick={() => onSort(\"name\")}>Name</th>\n          <th onClick={() => onSort(\"message\")}>Message</th>\n          <th onClick={() => onSort(\"date\")}>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {logs.map((log, index) => (\n          <tr key={log._id}>\n            <td>{log.logType}</td>\n            <td>{log.name}</td>\n            <td>{log.message}</td>\n            <td>{log.date}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default LogTable;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n// import ListGroup from \"./ListGroup\";\nimport LogTable from \"./LogTable\";\nimport Pagination from \"./common/Pagination\";\nimport { paginate } from \"../utils/paginate\";\nimport _ from \"lodash\";\n\nclass Chat extends Component {\n  state = {\n    logs: [],\n    pageSize: 5,\n    currentPage: 1,\n    sortColumn: { path: \"sender\", order: \"asc\" },\n  };\n  async componentDidMount() {\n    const response = await axios.get(\n      `https://capodicapi.herokuapp.com/api/capodicapi/log`\n    );\n    const logs = response.data;\n    console.log(logs);\n    this.setState({ logs });\n  }\n  handlePage = (page) => {\n    this.setState({ currentPage: page });\n  };\n  handleSort = (path) => {\n    const sortColumn = { ...this.state.sortColumn };\n    if (sortColumn.path === path)\n      sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\n    else {\n      sortColumn.path = path;\n      sortColumn.order = \"asc\";\n    }\n    console.log(sortColumn);\n    this.setState({ sortColumn });\n  };\n  render() {\n    const { length: count } = this.state.logs;\n    const { pageSize, currentPage, logs: allLogs, sortColumn } = this.state;\n    if (count === 0) return <p>There are no chats in database.</p>;\n\n    const sorted = _.orderBy(allLogs, [sortColumn.path], [sortColumn.order]);\n    const logs = paginate(sorted, currentPage, pageSize);\n\n    return (\n      <div className=\"row m-4\">\n        <div className=\"col-10\">\n          <h2 style={{ paddingLeft: \"20px\" }}>All Log History</h2>\n          <div style={{ paddingLeft: \"20px\" }}>\n            <p>There are total {count} logs.</p>\n            <LogTable logs={logs} onSort={this.handleSort} />\n            <Pagination\n              itemsCount={count}\n              pageSize={pageSize}\n              currentPage={currentPage}\n              onPageChange={this.handlePage}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n","import React from \"react\";\nimport Chat from \"./Chat\";\nimport Log from \"./Log\";\nimport { Route, Switch, Link } from \"react-router-dom\";\nconst Navbar = () => {\n  return (\n    <div className=\"container-fluid\">\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <h2 style={{ color: \"#ffff\" }}>Capo Di Capi</h2>\n\n        <ul style={{ marginTop: \"0px\", position: \"absolute\", left: \"200px\" }}>\n          <li\n            style={{\n              display: \"inline\",\n              padding: \"25px\",\n              fontSize: \"20px\",\n              color: \"white\",\n            }}\n          >\n            <Link style={{ paddingTop: \"5px\", color: \"white\" }} to=\"/\">\n              CHAT\n            </Link>\n          </li>\n          <li\n            className=\"m-1\"\n            style={{\n              display: \"inline\",\n              padding: \"25px\",\n              fontSize: \"20px\",\n            }}\n          >\n            <Link to=\"/loghistory\" style={{ color: \"white\" }}>\n              LOG\n            </Link>\n          </li>\n        </ul>\n      </nav>\n      <Switch>\n        <Route path=\"/\" component={Chat} exact />\n        <Route path=\"/loghistory\" component={Log} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport Navbar from \"./components/Navbar\";\n// import Chat from \"./components/Chat\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <BrowserRouter>\n        <Navbar />\n      </BrowserRouter>\n\n      {/* <main className=\"container\">\n        <Chat />\n      </main> */}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}